// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Footprint {
  id        String   @id @default(cuid())
  location  Json
  address   String?
  remarks   String
  images    String[]
  published Boolean  @default(true)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  lastReminder     DateTime?
  lastSosEmail     DateTime?
  accounts         Account[]
  sessions         Session[]
  footprints       Footprint[]
  links            Link[]
  setting          UserSettings?
  pushNotification PushSubscription[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id      String   @id @default(cuid())
  userId  String   @map("user_id")
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id             String   @id @default(cuid())
  reminderFreq   Int      @default(180)
  sosTime        Int      @default(24)
  emailList      String[] @default([])
  emailMessage   String?
  defaultMessage String?
  userId         String   @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id])
}

model PushSubscription {
  id             String    @id
  endpoint       String
  expirationTime DateTime?
  keys           Json
  userId         String    @map("user_id")
  user           User      @relation(fields: [userId], references: [id])
}
